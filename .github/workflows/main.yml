# This is a basic workflow to help you get started with Actions

name: Deployment_to_AWS

# Controls when the workflow will run
#Deleted the pull request
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v1
        with: 
          python-version: "3.8"

      - name: Get pip cache dir 
        id: pip-cache 
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m ip install --upgraded pip
          pip install -r requirements.txt

      - name: install elastic beanstalk cli
        run: |
          pip install awsebcli --upgrade 
          eb --version 
    
      - name: Configure aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ACCESS_KEY }}
          aws-region: us-east-1

      - name: creating ebs app
        run: |
          eb init image-classifier -p python-3.8 --region us-east-1
      
      - name: creating environment and deploying it 
        run: |
          (eb use flask-server && eb status flask-server && eb deploy --timeout 5 -v) || eb create flask-server --elb-type application -i t2.micro --max-instances 1 --region us-east-1 -v
